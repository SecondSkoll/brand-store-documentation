Create an Ubuntu Core image
===========================

.. only:: html

    .. note:: Check :doc:`/reference/configuration-values` for information
        relating to the specific configuration for your Dedicated Snap Store.

{% if 'admin@acme.com' in CUSTOMER_ADMIN_EMAIL %}
.. warning:: 

  Example values are provided for store configuration in this document. If
    you are a Dedicated Snap Store customer, you will be provided with a set of
    documentation with the details of your store.

{% endif %}

To validate that the store was provisioned correctly and that you are able to
access it, we recommend creating and booting an Ubuntu Core image for amd64.

Setup the Serial Vault
----------------------

In order for a device to be able to connect to your Dedicated Snap Store, it
must provide a secret to the Serial Vault. This secret is called the model API
key, and this key corresponds to a particular model name. The model name should
be an informative string like "acme-gateway-prod". For this tutorial, we are
using the model name ``{{CUSTOMER_MODEL_NAME}}``. You should :ref:`configure the Serial Vault <serial-vault>`
adding that model name, and make note of the API key. We will add that to the
gadget snap in the next section.

Creating the gadget snap
------------------------

One major requirement for building an Ubuntu Core image is having a gadget
snap. Gadget snaps do many things but, for our purposes here, the important
functionality is generating a serial number and using that serial number and
a pre-shared API key to get credentials from the Serial Vault to authenticate
with the Device View store. You can also use the gadget snap to set default
configuration values for `the system <https://snapcraft.io/docs/set-system-options>`_
and application snaps.

To build a custom gadget snap, we start by selecting a suitable candidate from
the `Canonical supported gadgets <https://snapcraft.io/docs/the-gadget-snap#p-3322-example-gadget-snaps>`_
follow `these instructions <https://ubuntu.com/core/docs/gadget-building>`_.

For this specific case of validating the initial store setup, let's use the
:guilabel:`64-bit PC Gadget Snap`.

.. TOOD: make snapcraft track programmable based on UC release?

.. terminal::
    :input: sudo snap install --classic --channel=8.x/stable snapcraft
    :user: user
    :host: localhost

    :input: sudo apt update
    :input: sudo apt install -y git
    :input: git clone -b {{CUSTOMER_UBUNTU_CORE_VERSION}} https://github.com/canonical/pc-gadget {{CUSTOMER_STORE_PREFIX}}
    :input: cd {{CUSTOMER_STORE_PREFIX}}

Update the ``name`` field in the ``snapcraft.yaml`` to
``{{CUSTOMER_STORE_PREFIX}}-pc``. Update the value of the ``MODEL_APIKEY``
environment variable in the ``snapcraft.yaml`` to the value generated during the
Serial Vault setup above.  Feel free to also adjust the ``version``, ``summary``
and ``description`` to be more meaningful in your context.

Build the snap:

.. terminal::
    :user: user
    :host: localhost
    :dir: ~/{{CUSTOMER_STORE_PREFIX}}
    :input: snapcraft

The sample "product_serial" is generated by ``date -Is`` in this gadget (see
the ``snap/hooks/prepare-device`` hook). In production the serial number should
be derived from a value inserted during the factory process or from a unique
hardware identifier, for uniqueness and traceability. See :ref:`an example using dmidecode <dmidecode>`
for how to modify the gadget to use dmidecode (x86_64 only) to read a serial
number from the DMI table.

Ensure that the Brand account is a :ref:`Publisher <setting-roles>` in your :ref:`Base store <base-stores>`
and `login to the Brand account <https://documentation.ubuntu.com/snapcraft/stable/how-to/publishing/authenticate/>`_.

Follow the instructions for `logging into accounts with snapcraft <https://documentation.ubuntu.com/snapcraft/stable/how-to/publishing/authenticate/>`_
and login to the Brand account.

Register the gadget snap name in your Base store and push the initial revision:

.. terminal::
    :user: user
    :host: localhost
    :dir: ~/{{CUSTOMER_STORE_PREFIX}}
    :input: snapcraft whoami

    email:        {{CUSTOMER_BRAND_EMAIL}}
    developer-id: {{CUSTOMER_BRAND_ACCOUNT_ID}}

    :input: snapcraft register {{CUSTOMER_STORE_PREFIX}}-pc --store={{CUSTOMER_STORE_ID}}
    ...
    you, and be the software you intend to publish there? [y/N]: y
    Registering {{CUSTOMER_STORE_PREFIX}}-pc.
    Congrats! You are now the publisher of '{{CUSTOMER_STORE_PREFIX}}-pc'.

    :input: snapcraft push {{CUSTOMER_STORE_PREFIX}}-pc_{{CUSTOMER_UBUNTU_CORE_VERSION}}_amd64.snap
    The Store automatic review failed.
    A human will soon review your snap, but if you can't wait please write in
    the snapcraft forum asking for the manual review explicitly.

    If you need to disable confinement, please consider using devmode, but
    note that devmode revision will only be allowed to be released in edge and beta
    channels.
    Please check the errors and some hints below:
      - (NEEDS REVIEW) type 'gadget' not allowed

At this point, you should add a `collaborator <https://snapcraft.io/docs/store-brand-accounts>`_
to the gadget snap and logout of the Brand account. A good choice for such an
account would be one with the **Viewer** role in the ``{{CUSTOMER_STORE_NAME}}``
and ``{{CUSTOMER_DEVICEVIEW_NAME}}`` stores.

Log into the web dashboard as ``{{CUSTOMER_ADMIN_EMAIL}}``, the **Reviewer**
for the ``{{CUSTOMER_STORE_NAME}}`` store, and access the `reviews page <https://dashboard.snapcraft.io/reviewer/{{ CUSTOMER_STORE_ID}}/>`_
to approve the gadget revision.

Login to the account you made a **Collaborator** on the gadget snap. Once the
revision is approved, you can use snapcraft to release it in the stable channel
as a **Collaborator**:

.. terminal::
    :user: user
    :host: localhost
    :dir: ~/{{CUSTOMER_STORE_PREFIX}}
    :input: snapcraft whoami

    email:        {{CUSTOMER_BRAND_EMAIL}}
    developer-id: {{CUSTOMER_BRAND_ACCOUNT_ID}}

    :input: snapcraft release {{CUSTOMER_STORE_PREFIX}}-pc 1 stable
    Track    Arch    Channel    Version    Revision
    latest   all     stable     {{CUSTOMER_UBUNTU_CORE_VERSION}}     1
                     candidate  ^          ^
                     beta       ^          ^
                     edge       ^          ^
    The 'stable' channel is now open.

The gadget snap is now available for installation from the
``{{CUSTOMER_DEVICEVIEW_NAME}}`` store and for inclusion in images.

Creating the model assertion
----------------------------

The final step before you can build a custom Ubuntu Core image is creating a
`model assertion <https://documentation.ubuntu.com/core/reference/assertions/model/>`_,
which provides image related metadata ubuntu-image uses to build the image. In
order to create the model assertion, a key registered to the Brand account must
sign the JSON for the model assertion. For details on how to create and register
a model key, please refer to `Sign a model assertion <https://ubuntu.com/core/docs/sign-model-assertion>`_.

The below creates a JSON file which can be signed to create a model assertion.

Access the `snap page <https://dashboard.snapcraft.io/snaps/{{CUSTOMER_STORE_PREFIX}}-pc>`_
to get the ``{{CUSTOMER_STORE_PREFIX}}``-pc snap's snap ID and fill the
``<CUSTOMER_SNAP_IDS>`` field.

.. terminal::
    :user: user
    :host: localhost
    :dir: ~/{{CUSTOMER_STORE_PREFIX}}
    :input: cat << EOF > {{CUSTOMER_MODEL_NAME}}-model.json

    {
      "type": "model",
      "authority-id": "{{CUSTOMER_BRAND_ACCOUNT_ID}}",
      "brand-id": "{{CUSTOMER_BRAND_ACCOUNT_ID}}",
      "series": "16",
      "model": "{{CUSTOMER_MODEL_NAME}}",
      "store": "{{CUSTOMER_DEVICEVIEW_ID}}",
      "architecture": "amd64",
      "base": "core{{CUSTOMER_UBUNTU_CORE_VERSION}}",
      "grade": "dangerous",
      "snaps": [
        {
          "default-channel": "latest/stable",
          "id": "<CUSTOMER_SNAP_IDS>",
          "name": "{{CUSTOMER_STORE_PREFIX}}-pc",
          "type": "gadget"
        },
        {
          "default-channel": "{{CUSTOMER_UBUNTU_CORE_VERSION}}/stable",
          "id": "pYVQrBcKmBa0mZ4CCN7ExT6jH8rY1hza",
          "name": "pc-kernel",
          "type": "kernel"
        },{% if '22' in CUSTOMER_UBUNTU_CORE_VERSION %}
        {
          "default-channel": "latest/stable",
          "id": "amcUKQILKXHHTlmSa7NMdnXSx02dNeeT",
          "name": "core22",
          "type": "base"
        },{% endif %}{% if '24' or 'NULL' in CUSTOMER_UBUNTU_CORE_VERSION %}
        {
          "default-channel": "latest/stable",
          "id": "dwTAh7MZZ01zyriOZErqd1JynQLiOGvM",
          "name": "core24",
          "type": "base"
        },{% endif %}
        {
          "default-channel": "latest/stable",
          "id": "PMrrV4ml8uWuEUDBT8dSGnKUYbevVhc4",
          "name": "snapd",
          "type": "snapd"
        },
        {
          "name": "console-conf",
          "type": "app",
          "default-channel": "24/stable",
          "id": "ASctKBEHzVt3f1pbZLoekCvcigRjtuqw",
          "presence": "optional"
        }
      ],
      "timestamp": "$(date +%Y-%m-%dT%TZ)"
    }
    EOF

    :input: snapcraft list-keys
        Name          SHA3-384 fingerprint
    *   serial        <fingerprint>
    *   model         <fingerprint>

    :input: snap sign -k model {{CUSTOMER_MODEL_NAME}}-model.json > {{CUSTOMER_MODEL_NAME}}-model.assert

Ensure that all snaps listed in the model assertion are available in the
``{{CUSTOMER_DEVICEVIEW_NAME}}`` store. If they are not, you must :ref:`include them <snap-inclusion>`.

Creating the image
------------------

These are example instructions specific to your particular Dedicated
Snap Store. To see more general instructions, please refer to the
`Build your first image <https://documentation.ubuntu.com/core/tutorials/build-your-first-image>`_
and `Image creation <https://documentation.ubuntu.com/core/how-to-guides/image-creation>`_
public documentation.

.. terminal::
    :input: sudo snap install --classic --channel=latest/stable ubuntu-image

In order for ubuntu-image to able to access snaps from your Dedicated Snap
Store, you need to provide credentials for a **Viewer** account using one of the
following environment variables:

* ``UBUNTU_STORE_AUTH`` - this must be set to the actual contents of the file
    (e.g. store.auth) containing your exported developer credentials.
* ``UBUNTU_STORE_AUTH_DATA_FILENAME`` - this must be set to the path of the file
    containing your exported developer credentials.

The Ubuntu Core image is built by using the above developer account credential.
Because the console-conf snap is marked as ``presence: optional`` in the JSON
above, we must explicitly include it in the image.

.. terminal::
	:input: UBUNTU_STORE_AUTH=$(cat store.auth) ubuntu-image snap --snap console-conf {{CUSTOMER_MODEL_NAME}}-model.assert

Launching and verifying the image
---------------------------------

To launch and test your newly generated Ubuntu Core image,
follow the `Testing with QEMU <https://ubuntu.com/core/docs/testing-with-qemu>`_
steps. Once the image is booted and installed, you can log in then verify if the
all required snaps are installed, the {{CUSTOMER_MODEL_NAME}}  model is correct
and a serial assertion was obtained:

.. terminal::
    :user: {{UBUNTU_SSO_USER_NAME}}
    :host: localhost

    Welcome to Ubuntu {{CUSTOMER_UBUNTU_CORE_VERSION}} (GNU/Linux <kernel version> x86_64)
    ... 
    Please see 'snap --help' for app installation and updates.
    ...

    :input: snap list
    Name          Version      Rev    Tracking       Publisher    Notes
    console-conf  24.04.1      40     24/stable      canonical✓   -
    core24        20240528     423    latest/stable  canonical✓   base
    pc-kernel     6.8.0-40.40  1938   24/stable      canonical✓   kernel
    snapd         2.63         21759  latest/stable  canonical✓   snapd

    :input: snap changes
    ID   Status  Spawn               Ready               Summary
    1    Done    today at 07:15 UTC  today at 07:16 UTC  Initialize system state
    2    Done    today at 07:16 UTC  today at 07:16 UTC  Initialize device

    :input: snap model --assertion
    type: model
    authority-id: {{CUSTOMER_BRAND_ACCOUNT_ID}}
    series: 16
    brand-id: {{CUSTOMER_BRAND_ACCOUNT_ID}}
    model: {{CUSTOMER_MODEL_NAME}}
    ... 

    :input: snap model --serial --assertion
    type: serial
    authority-id: {{CUSTOMER_BRAND_ACCOUNT_ID}}
    revision: 1
    brand-id: {{CUSTOMER_BRAND_ACCOUNT_ID}}
    model: {{CUSTOMER_MODEL_NAME}}
    ...
